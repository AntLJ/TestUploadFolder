/**
@page usage 使い方

@section usage_required 使用するための準備

<h2>stdafx.hへの定義</h2>
stdafx.hでWinMgr.hをインクルードする。<br>
libファイルの指定や各種クラスは全てこのファイルに定義してあるので、このファイルをインクルー<br>
ドするだけでよい。
@code
#include <SizingFramework/include/WinMgr.h>
@endcode
なお、MFCやATL/WTLの必要なファイルについては適宜インクルードすること（ここでは触れない）。

@section usage_common 一般的な使い方

<h2>ダイアログクラスへの定義</h2>
<h3>継承とメッセージループのチェイン</h3>
ダイアログクラスで、CSizeableDlgを継承することにより、必要なメッセージループが定義される。<br>
そのため、このメッセージループに必ずChainしてメッセージが回るようにする必要がある。
@code
class CATLTestAppDlg : 
	public CSizeableDlg<CDialogImpl<CATLTestAppDlg> >
{
...
BEGIN_MSG_MAP_EX(CATLTestAppDlg)
    ...
	CHAIN_MSG_MAP(CSizeableDlg) // CSizeableDlgのメッセージマップを結合します
END_MSG_MAP()
@endcode

<h3>メッセージハンドラ定義時の注意</h3>
メッセージマップにハンドラを定義することにより独自処理を追加することが出来るが、メッセージマッ<br>
プを持ったクラスを継承している場合にはその処理に注意する必要がある。<br>
このことはSizing Frameworkを使用することに限らず一般的に言えることだが、継承元のクラスでどの<br>
メッセージをどのように処理しているかということを考慮する必要がある。<br>
例えばCSizeableDlgクラスではWM_INITDIALOGメッセージをハンドリングしており、その中でコントロー<br>
ルの配置の初期化を行っている。通常メッセージをチェインする場合は自身のメッセージマップの最後に<br>
記述するので、メッセージハンドラでは以下のようにしてメッセージをチェイン先にも回す必要がある。
@code
	BOOL OnInitDialog(HWND hwnd, LPARAM lParam)
	{
		SetMsgHandled(FALSE); // CSizeableDlgのメッセージハンドラにまわすため
        ...
@endcode
この例はメッセージクラッカーを使用してメッセージマップを定義している場合だが、通常のメッセージ<br>
マップの時にも同様の処理（bHandled = FALSE とする）が必要である。<br>
MFCの場合にはvirtualで定義されるので、ベースクラスのOnInitDialog相当の関数を呼ぶ必要がある。<br>
この際、もし呼ばれる順番を考慮する必要がある場合、例えばCHAIN_MSG_MAPを自身のメッセージハン<br>
ドラの後ろに持ってくる等して処理順番を適宜変更する必要がある。

<h2>配置マップ</h2>
<h3>概要と注意</h3>
<p>
ダイアログ上での配置は配置マップと呼ばれるものに記述する。<br>
配置マップでは、グループの定義及びコントロールの配置に関して記述を行うことができる。<br>
グループは列方向と行方向で固定・自動拡張・パーセンテージ指定が可能である。<br>
コントロールに関しては固定サイズ、行・列両方向への自動拡張、行・列方向へのパーセンテージ指定<br>
が可能である。
</p>
<p>
配置マップを定義する際、気をつける必要があるのが、どこに記述するかである。<br>
基本的に、ダイアログクラスのcppファイルからしかインクルードされないファイルへ記述する必要がある。<br>
複数の箇所からインクルードされるファイルに記述すると、コンパイルが通らなくなるので注意されたい。
</p>
<h3>記述サンプルとイメージ</h3>
以下にサンプルを示し、その内容を説明する。<br/>
より詳しい説明に関してはMSDNを参照することをお勧めする。
\image html dlgmap.png
- BEGIN_WINDOW_MAP( XXXXXXXXXXXXXXXX )\n
  ベースとなる部分。BEGIN-ENDの間で、扱いたい処理を記述する
- BEGINROWS(TYPE, ID, M)\n
  この部分に囲まれているコントロールは、縦方向に並ぶ
	- TYPE：TYPEを指定できる(下記参照）
	- ID：コントロールID
	- M：余白を作成できる。（RCMARGINS(w,h)を指定できる)
- BEGINCOLS(TYPE, ID, M)\n
  この部分に囲まれているコントロールは、横方向に並ぶ
	- TYPE：TYPEを指定できる(下記参照）
	- ID：コントロールID
	- M：余白を作成できる。（RCMARGINS(w,h)を指定できる)
- RCMARGINS(w,h)\n
  上記2・3のパラメタとしてのみ使用可能
	- w：横方向（左右両側）に余白を作成できる
	- h：縦方向(上下両側)に余白を作成できる
- TYPE
	- WRCT_FIXED 固定の大きさを指定する
	- WRCT_PCT   パーセントで指定する
	- WRCT_REST  次のコントロール（表示するもの）まで、領域を埋める
	- WRCT_TOFIT 規定の大きさで表示する
- RCFIXED(id,val)\n
  大きさを固定する
	- id：コントロールID
	- val：横幅をピクセルで指定する
- RCPERCENT(id,val)\n
  パーセントで大きさを指定する。同一内で100%にしなければならない
	- id：コントロールID
	- val：パーセント値
- RCREST(id)\n
  次のコントロールまでの領域を埋める
	- id：コントロールID（id=-1指定することで、右詰etc.を実現できる）
- RCTOFIT(id)\n
  作成してあるコントロールをそのまま表示する
	- id：コントロールID
- RCSPACE(val)\n
  余白を作成することができる
	- val：ピクセル数を指定

@warning
サイズバーの後に「RCSPACE」が使えない。RCMARGINSで調整する

以下が実際のダイアログイメージである。
\image html dlgsample.png
- BEGINROWS(WRCT_REST, 0, RCMARGINS(10,10))（白①）\n
  このダイアログの一番大きなくくり。\n
  上下2つにまとめて区切っている\n
  「RCMARGINS(10,10)」により、上下左右に10ピクセルの余白を作る\n
- BEGINCOLS(WRCT_REST, 0, 0)（白②）\n
  左右2つにまとめて区切っている\n
  左部：ツリービュー、サイズバー（見えない）\n
  右部：テキスト（「建物種別」「情報ソース」）、コンボボックス、チェックボックス、エディットボックス
- BEGINCOLS(WRCT_TOFIT, 0, 0)（黄②）\n
  上記マクロの第1引数と対になることで、リサイズ時の動きが決まる\n
  WRCT_TOFITを指定した、この部分（適用ボタン、閉じるボタン）が上下方向にリサイズした場合\n
  大きさ固定でリサイズされる\n
  RCREST(-1)によって、右詰される
- BEGINROWS(WRCT_REST, 0, RCMARGINS(10,0))（白③）\n
  上下2つにまとめて区切っている\n
  RCMARGINS(10,0)により、左右10ピクセルの余白を作る\n
  リストビューから10ピクセル、右枠から20(10+10)ピクセル離れることになる
- BEGINROWS(WRCT_REST, 0, 0)（白④）\n
  上下2つにまとめて区切っている
- BEGINCOLS(WRCT_TOFIT, 0, 0)（黄④）\n
  上記マクロの第1引数と対になることで、リサイズ時の動きが決まる\n
  WRCT_TOFITを指定した、この部分（テキスト「情報ソース」、エディットボックス）が上下方向にリサイズした場合\n
  大きさ固定でリサイズされる。WRCT_RESTを指定した側が余白を埋めるために、結果下詰となる\n

*/
