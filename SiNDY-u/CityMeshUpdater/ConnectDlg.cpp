/*
 * Copyright (C) INCREMENT P CORP. All Rights Reserved.
 *
 * THIS SOFTWARE IS PROVIDED BY INCREMENT P CORP., WITHOUT WARRANTY OF
 * ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE
 * AND NONINFRINGEMENT.
 *
 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDER BE LIABLE FOR ANY
 * CLAIM, DAMAGES SUFFERED BY LICENSEE AS A RESULT OF USING, MODIFYING
 * OR DISTRIBUTING THIS SOFTWARE OR ITS DERIVATIVES.
*/

// This file was generated by WTL Dialog wizard 
// ConnectDlg.cpp : Implementation of CConnectDlg

#include "stdafx.h"
#include "ConnectDlg.h"
#include "grobalfunc.h"
#include "atldlgs.h"
#include "SelectVersionDlg.h"

// CConnectDlg
CConnectDlg::CConnectDlg()
{
	//m_strServername = _T("garnet9");
	//m_strUsername = _T("shukuzawa");
	//m_strPassword = _T("shukuzawa");

	//m_strDestfeatureclass = _T("CITYMESH_1");
	//m_strSrccsv = _T("D:\\PGDB\\test20090728.csv");
	//m_strDstversion = _T("SDE.CityMeshTest");

	m_bIsVersioned = false;
}

CConnectDlg::~CConnectDlg()
{
}

LRESULT CConnectDlg::OnInitDialog(UINT uMsg, WPARAM wParam, LPARAM lParam, BOOL& bHandled)
{
	DoDataExchange();
	DlgResize_Init();
	return 1;  // Let the system set the focus
}

LRESULT CConnectDlg::OnClickedOK(WORD wNotifyCode, WORD wID, HWND hWndCtl, BOOL& bHandled)
{
	DoDataExchange(TRUE);
	EndDialog(wID);
	return 0;
}

LRESULT CConnectDlg::OnClickedCancel(WORD wNotifyCode, WORD wID, HWND hWndCtl, BOOL& bHandled)
{
	EndDialog(wID);
	return 0;
}

IWorkspacePtr CConnectDlg::GetWorkspace( WorkspaceVersion enumWhatVersion )
{
	IWorkspacePtr ipRetWS;
	switch( enumWhatVersion ){
		case VER_DEFAULT:
			ipRetWS = m_ipDefaultWorkSpace;
			break;
		case VER_SRC:
			ipRetWS = m_ipSrcWorkSpace;
			break;
		case VER_DST:
			ipRetWS = m_ipDstWorkSpace;
			break;
		default:
			break;
	}
	return ipRetWS;
}

bool CConnectDlg::Connect( LPCTSTR strNewVerName )
{
	g_cOutput.OutputMsg( _T("DBに接続中...\r\n"), false );

	// SDE.DEFAULTのワークスペースを取得
	m_ipDefaultWorkSpace = OpenWorkSpace( _T("SDE.DEFAULT") );
	if( !m_ipDefaultWorkSpace )
		return false;

	CString strErrMsg;
	// 更新先のフィーチャクラスを開いてバージョン対応かどうか調べる
	IFeatureClassPtr ipFeatClass;
	((IFeatureWorkspacePtr)m_ipDefaultWorkSpace)->OpenFeatureClass( CComBSTR( m_strDestfeatureclass ), &ipFeatClass );
	if( ipFeatClass )
	{
		VARIANT_BOOL vbIsVersioned = VARIANT_FALSE;
		((IVersionedObjectPtr)ipFeatClass)->get_IsRegisteredAsVersioned( &vbIsVersioned );

		bool bIsCanceled = false;
		IWorkspacePtr ipDstParentWS;
		if( vbIsVersioned )
		{	
			CSelectVersionDlg cVerDlg( m_strDestfeatureclass, m_strServername );
			if( cVerDlg.DoModal()  == IDOK )
			{
				m_bIsVersioned = true;

				// 更新元のバージョンのワークスペースを取得
				m_ipSrcWorkSpace = OpenWorkSpace( cVerDlg.m_strSrcversion );

				// 更新先に編集用のバージョンを切る。
				ipDstParentWS = OpenWorkSpace( cVerDlg.m_strDstversion );
				m_ipDstWorkSpace = gf::CreateNewVersion( ipDstParentWS, strNewVerName );

				if( !(m_ipSrcWorkSpace && m_ipDstWorkSpace) )
					bIsCanceled = true;
			}
			else
				bIsCanceled = true;

		}
		else
		{
			m_ipDstWorkSpace = m_ipDefaultWorkSpace;
		}


		return !bIsCanceled && g_cOutput.SetDBInfo( m_ipSrcWorkSpace, ipDstParentWS, m_ipDstWorkSpace);
	}
	strErrMsg.Format( _T("%sのオープンに失敗。\r\n"), m_strDestfeatureclass );
	g_cOutput.OutputMsg( strErrMsg );
	return false;
}



////////////////////////////////
// 
// private関数実装
//
////////////////////////////////
IWorkspacePtr CConnectDlg::OpenWorkSpace( LPCTSTR strVersionName )
{
	return gf::OpenWorkSpace( m_strServername, m_strUsername, m_strPassword, strVersionName );
}

LRESULT CConnectDlg::OnChangeUsername(WORD wNotifyCode, WORD wID, HWND hWndCtl)
{
	DoDataExchange( TRUE, IDC_EDIT_USERNAME );
	::SetDlgItemText( m_hWnd, IDC_EDIT_PASSWORD, m_strUsername );

	return 0;
}

LRESULT CConnectDlg::OnClickedFileSelect(WORD wNotifyCode, WORD wID, HWND hWndCtl, BOOL& bHandled)
{
	CFileDialog dlg(TRUE, _T("csv"), NULL, OFN_HIDEREADONLY | OFN_CREATEPROMPT, _T("csvファイル (*.csv)\0*.csv\0すべてのファイル (*.*)\0*.*\0\0"));

	if(dlg.DoModal() == IDOK)
	{
		m_strSrccsv = dlg.m_szFileName;
		DoDataExchange( FALSE, IDC_EDIT_SRCCSV );
	}

	return 0;
}
