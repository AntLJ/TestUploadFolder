=================== 概要 ==============================================
概要作成：工藤

点、線、ポリゴンに関する処理をまとめたクラス。

Dpos,Dpos2	　		: ポイント用
line_seg			: 線分
Crect				: 矩形
dvec				: ベクトル用
poly_cls			: ポリゴン、ポリライン等の点列用
Pt_Dist_Admin_Array	: 点と点の距離と位置を管理する

=================== 詳細 ==============================================

Dpos,Dpos2 クラスのメンバは下記のとおり。

・Data_Set()		// データのセット
・Get_Dist()		// 座標点同士の距離を獲得

line_seg クラスのメンバは下記のとおり。
・Data_Set()		// データのセット
・Cross_Seg()		// 線分の交差判定
・get_pt_seg_dist()	// ２点で構成される線分と点の距離を求める
・get_pt_line_dist()// ２点を通る直線と点の距離を求める

Crect クラスのメンバは下記のとおり。
・Rect_Cross_Chk()	// 矩形同士の交差チェック
・Rect_Inner_Chk()	// 矩形内に矩形が内包されるかどうか
・Point_Inner_Chk()	// 矩形内に点が内包されるかどうか

dvec クラスのメンバは下記のとおり。
・get_gaiseki()		// ベクトルの外積の値を求める(符号だけ)
・get_vec()			// 与えられた２点を結ぶベクトルを作成する
・get_naiseki()		// ベクトルの内積の値を求める(符号だけ)
・get_deg()			// ２つのベクトルのなす角を求める

poly_cls クラスのメンバは下記のとおり。
・Clear_Pts()		// 内部点列のクリア
・Clear_Arcs()		// 内部アーク列のクリア
・Rot_Pts()			// 点列の回転（開始位置を変える）
・Reverse_Pts()		// 点列の反転
・Div_Pts()			// 点列の分割
・Make_Arcs()		// 点列から、アーク列へ内部的に変換
・Make_Pts()		// アーク列から、点列へ内部的に変換
・Arc_Connect()		// アーク列を接合順に並べる
・Arc_Insert()		// アークをアーク列に挿入する
・Arcs_Insert()		// アーク列をアーク列に挿入する
・getouterrect()	// ポリゴン点列から、外接矩形の獲得
・crossline()		// ２つの折れ線の交点の個数を求める
・get_pt_arc_dist()	// 点と、ラインの距離を求める
・Get_Poly_Dist()	// 点列と点列の距離を求める
・iscenterin()		// 矩形の中心がポリゴン内かどうかのチェック
・innerpolycheck()	// ポリゴン１の内部にポリゴン２が内包されるかどうか
・innerpolygon()	// 与えられた点が多角形に対してどこにあるか
・Find_Center()		// ポリゴンの代表点を探す
・calc_area()		// ポリゴンの面積
・Print_Arcs()		// 内部アーク列の座標値の表示（動作確認目的）

Pt_Dist_Admin_Array　クラスのメンバは下記のとおり。
・pushData()		// データを追加する
・limitBuf()		// 距離管理バッファを最初の位置から指定サイズまで切り詰める
・getBegin()		// 最初のデータを取り出す
・getNext()			// 次のデータを取り出す

===================== サンプル=========================================

void	Test ( IGeometryPtr&	c_ipGeom )
{
	LONG		a_lPartNum	= 0;

	poly_cls	a_pPoly;		// アーク列を追加する

	IGeometryCollectionPtr	a_ipGeoColl;
	a_ipGeoColl	= c_ipGeom;

	// パート数の取得
	a_lPartNum	= a_ipGeoColl->.get_GeometryCount();
		
	LONG	i	= 0;
	for(i = 0; i < a_lPartNum; i++)	// パートのループ
	{
		IGeometryPtr		a_ipCurGeo;
		IPointCollectionPtr	a_ipPts;
		
		a_ipCurGeo	= a_ipGeoColl->get_Geometry ( i, &a_ipCurGeo );
		
		a_ipPts	= a_ipCurGeo;

		long	a_lPtsCount	= 0;
		a_ipPts->get_PointCount( &a_lPtsCount );
		//　点列のコピー
		int j = 0;
		for(j = 0; j < a_lPtsCount-1; j++)
		{
			IPointPtr	a_B_Pt;
			IPointPtr	a_E_Pt;
			Dpos		a_Begin;
			Dpos		a_End;

			a_ipPts->get_Point( i, &a_B_Pt );		// 点一個取り出し
			a_ipPts->get_Point( i+1, &a_E_Pt );
			a_B_Pt->get_X( &a_Begin.xpos );
			a_B_Pt->get_Y( &a_Begin.ypos );
			a_E_Pt->get_X( &a_End.xpos );
			a_E_Pt->get_Y( &a_End.ypos );
			line_seg	cur_arc(a_Begin, a_End);
			// アーク列を追加
			a_pPoly.e_Arcs.push_back(cur_arc);
		}
	}
	
	if(a_pPoly.Arc_Connect(0) == -1) {
		printf	( "アーク列の並べ替えに失敗" );
		return;
	}
}

